AWSTemplateFormatVersion: "2010-09-09"
Description: 'CodeBuild - SecretsManager Rancher'
###############################################################################
#                               Parameters                                    #
###############################################################################
Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: String
  SecretsManager:
    Description: Name of Secret
    Type: String
    Default: RSA
##############################################################################
#                               Resources                                    #
##############################################################################
Resources:
  # CODEBUILD PROJECT
  RancherCodeBuildProject:
    DependsOn: CodeBuildPolicy
    Type: AWS::CodeBuild::Project
    Properties:
      Name: Rancher-Secrets
      Description: Rancher CodeBuild Project For High Availability
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:2.0
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 10
              commands:
                - echo Entered the install phase...
                - ssh-keygen -t rsa -C "${KeyName}" -f ~/.ssh/${KeyName} -N ''
            pre_build:
              commands:
                - echo Entered the pre_build phase...
                - aws ec2 import-key-pair --key-name "${KeyName}" --public-key-material file://$HOME/.ssh/${KeyName}.pub --region ${AWS::Region}
            build:
              commands:
                - echo Entered the build phase...
                - echo RKE-Installation PEM file to be stored in SecretsManager
            post_build:
              commands:
                - echo Entered the post_build phase...
                - aws secretsmanager create-secret --name PublicKey${SecretsManager} --description "Public key material for K8s-${AWS::StackName}" --secret-string file://~/.ssh/${KeyName}.pub --region ${AWS::Region}
                - aws secretsmanager create-secret --name SecretKey${SecretsManager} --description "Security RSA key for K8s-${AWS::StackName}" --secret-string file://~/.ssh/${KeyName} --region ${AWS::Region}

      TimeoutInMinutes: 15
      Tags:
      - Key: RANCHER
        Value: RanchSecretBuilder-CodeBuild

# CODEBUILD ROLE
  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: Rancher-Secrets
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite

  CodeBuildPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: Rancher-Secrets
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - secretsmanager:CreateSecret
              - secretsmanager:GetSecretValue
              - secretsmanager:ListSecrets
              - secretsmanager:TagResource
              - secretsmanager:UpdateSecret
              - ec2:ImportKeyPair
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - logs:CreateLogStream
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl
              - s3:GetBucketLocation
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*/*
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/${KeyName}
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build:*/*
              - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*
      Roles:
        -
          !Ref CodeBuildRole

# # Custom Resource
  CustomCodeBuildResource:
    DependsOn: CodeBuildPolicy
    Type: AWS::CloudFormation::CustomResource
    # DependsOn: RanchMaster
    Properties:
      ServiceToken: !GetAtt LambdaCodeBuildTrigger.Arn
      ProjectName: Rancher-Secrets

# # Lambda function that starts a codebuild project!
  LambdaCodeBuildTrigger:
    DependsOn: RancherCodeBuildProject
    Type: AWS::Lambda::Function
    Properties:
      Description: A Lambda function that triggers a CodeBuild Project
      Timeout: 60
      Handler: index.codebuild_handler
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          # Boto3 AWS Services
          codebuild_client = boto3.client('codebuild')

          def codebuild_handler(event, context):
            # LOGGER.info('got event {}'.format(event))
            responseData = {}

            if event["RequestType"] =="Create":
              # Creating resource
              LOGGER.info('CREATE!')
              # Create KeyPair
              creating = (event['ResourceProperties'])
              start_build = codebuild_client.start_build(
                  projectName=event['ResourceProperties']['ProjectName'])
              cfnresponse.send(event, context, cfnresponse.SUCCESS, creating)
              print(start_build)
              return start_build

            if event["RequestType"] == "Update":
              # Updating resource
              updating = (event['ResourceProperties'])
              LOGGER.info('UPDATE!')
              cfnresponse.send(event, context, cfnresponse.SUCCESS, updating)

            if event["RequestType"] == "Delete":
              # Get object name and version id details
              deleting = (event['ResourceProperties'])
              LOGGER.info('DELETE!')
              cfnresponse.send(event, context, cfnresponse.SUCCESS, deleting)

            else:
              response = cfnresponse.FAILED
              return response

      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TheKeyPair_Lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource:
                  - '*'
###############################################################################
#                               Exports/Outputs                               #
###############################################################################
Outputs:
  KeyName:
    Value: !Ref KeyName
  SecretsManager:
    Value: !Ref SecretsManager
  CodeBuildRole:
    Value: !Ref CodeBuildRole
  RancherCodeBuildProject:
    Value: !Ref RancherCodeBuildProject
  LambdaCodeBuildTrigger:
    Value: !Ref LambdaCodeBuildTrigger
