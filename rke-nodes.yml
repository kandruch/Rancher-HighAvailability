AWSTemplateFormatVersion: "2010-09-09"
Description: 'RKE - Rancher K8s Engine Installation Nodes'
###############################################################################
#                               Parameters                                    #
###############################################################################
Parameters:
########---EC2 INSTANCES---#########
  SecurityStackName:
    Description: >-
      Active CloudFormation stack that contains the security
      resources, such as the security group, that will be used in
      this stack.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: RKESecurityStack
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: String
  InstanceName:
    Description: Please enter the name of the EC2 Instance.
    Type: String
    Default: Rancher-K8s
  InstanceType:
    Description: Please choose the EC2 Instance type.
    Type: String
    Default: t2.large
    AllowedValues:
      - m5a.large
      - m5a.xlarge
      - m4.large
      - m4.xlarge
      - t2.large
  EBSVolumeSize:
    Type: Number
    Description: Size of EBS volume attached to the EC2
    Default: 20
    MinValue: 10
    MaxValue: 100
  # LatestAmiId:
  #   Description: SSM path for latest Linux Golden AMI ImageId
  #   Type: AWS::EC2::Image::Id
  #   Default: ami-0ff24797826ebbcd5
  InstanceIamProfile:
    Description: EC2 instance IAM profile
    Type: String
    Default: EC2-Services
  EC2Subnet1:
    Description: Please select which subnet this EC2 will be deployed in.
    Type: AWS::EC2::Subnet::Id
  EC2Subnet2:
    Description: Please select which subnet this EC2 will be deployed in.
    Type: AWS::EC2::Subnet::Id
  # EC2Subnet3:
  #   Description: Please select which subnet this EC2 will be deployed in.
  #   Type: AWS::EC2::Subnet::Id
  # SecurityGroup:
  #   Description: Please select which security group this EC2 will use.
  #   Type: AWS::EC2::SecurityGroup::Id
  VpcId:
    Description: VPC ID where the instances will be deployed
    Type: 'AWS::EC2::VPC::Id'

########---LOAD BALANCER---#########
# NLB PARAMETERS
  LoadBalancerName:
    Type: String
    Description: This name must be unique per region per account. Maximum 32 characters
    Default: NLB-Rancher-K8s
  LoadBalancerProtocol:
    Type: String
    Description: Enter the protocol the load balancer accepts.
    Default: TCP
    AllowedValues:
      - TCP
  LoadBalancerScheme:
    Description: NLB Scheme (Internal or Internet Facing)
    Type: String
    Default: internal
    AllowedValues:
      - internal
      - internet-facing
  TargetGroupName:
    Type: String
    Description: This name must be unique per region per account. Maximum 32 characters
    Default: TG-Rancher-K8s
  HealthCheckProtocol:
    Type: String
    Description: Enter the protocol the load balancer uses when performing health checks on targets.
    Default: TCP
    AllowedValues:
      - TCP
  HealthyThresholdCount:
    Type: Number
    Default: 3
    Description: The number of consecutive health checks successes required before considering an unhealthy target healthy. In TCP mode Healthy and UnHealthy must be the same.
  UnhealthyThresholdCount:
    Type: Number
    Default: 3
    Description: The number of consecutive health check failures required before considering a target unhealthy. In TCP mode Healthy and UnHealthy must be the same.
  HealthCheckIntervalSeconds:
    Type: Number
    Default: 30
    Description: The approximate amount of time, in seconds, between health checks of an individual target.
  Port:
    Type: Number
    Description: The port on which the targets receive traffic.
    Default: 443

########---ROUTE53---#########
  PHZName:
    Type: String
    Default: example.com.
    Description: The name of your private hosted zone

# ROUTE 53 RECORD SET
  ApplicationName:
    Type: String
    Default: rancher.example.com.
    Description: The name of your application with domain name

##############################################################################
#                               Mappings                                     #
##############################################################################
Mappings:
  RegionMap:
    'eu-north-1':
      AMI: 'ami-006cda581cf39451b'
    'ap-south-1':
      AMI: 'ami-0ce933e2ae91880d3'
    'eu-west-3':
      AMI: 'ami-0e9e6ba6d3d38faa8'
    'eu-west-2':
      AMI: 'ami-05f37c3995fffb4fd'
    'eu-west-1':
      AMI: 'ami-01f14919ba412de34'
    'ap-northeast-2':
      AMI: 'ami-0d59ddf55cdda6e21'
    'me-south-1':
      AMI: 'ami-0c55b36523aa89a7c'
    'ap-northeast-1':
      AMI: 'ami-068a6cefc24c301d2'
    'sa-east-1':
      AMI: 'ami-07820a4443539a2b0'
    'ca-central-1':
      AMI: 'ami-0ff24797826ebbcd5'
    'ap-east-1':
      AMI: 'ami-cd86fcbc'
    'ap-southeast-1':
      AMI: 'ami-07539a31f72d244e7'
    'ap-southeast-2':
      AMI: 'ami-0119aa4d67e59007c'
    'eu-central-1':
      AMI: 'ami-0d4c3eabb9e72650a'
    'us-east-1':
      AMI: 'ami-00068cd7555f543d5'
    'us-east-2':
      AMI: 'ami-0dacb0c129b49f529'
    'us-west-1':
      AMI: 'ami-0b2d8d1abb76a53d8'
    'us-west-2':
      AMI: 'ami-0c5204531f799e0c6'
##############################################################################
#                               Resources                                    #
##############################################################################
Resources:
# EC2 RANCHER K8 CLUSTER
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref EC2Subnet1
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !ImportValue
          'Fn::Sub': ${SecurityStackName}-RKESecurityGroupID
      IamInstanceProfile: !Ref InstanceIamProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref EBSVolumeSize
            VolumeType: gp2
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      UserData:
        Fn::Base64: !Sub |
              #!/bin/bash
              yum update -y
              amazon-linux-extras install -y docker
              service docker start
              usermod -a -G docker ec2-user
              yum install -y wget
              yum install -y jq
              echo ${AWS::StackName}
      Tags:
        - Key: Name
          Value: !Ref InstanceName

  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref EC2Subnet2
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !ImportValue
          'Fn::Sub': ${SecurityStackName}-RKESecurityGroupID
      IamInstanceProfile: !Ref InstanceIamProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref EBSVolumeSize
            VolumeType: gp2
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      UserData:
        Fn::Base64: !Sub |
              #!/bin/bash
              yum update -y
              amazon-linux-extras install -y docker
              service docker start
              usermod -a -G docker ec2-user
              yum install -y wget
              yum install -y jq -y
              echo ${AWS::StackName}
      Tags:
        - Key: Name
          Value: !Ref InstanceName

  EC2Instance3:
    Type: AWS::EC2::Instance
    Properties:
      SubnetId: !Ref EC2Subnet1
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !ImportValue
          'Fn::Sub': ${SecurityStackName}-RKESecurityGroupID
      IamInstanceProfile: !Ref InstanceIamProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref EBSVolumeSize
            VolumeType: gp2
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      UserData:
        Fn::Base64: !Sub |
              #!/bin/bash
              yum update -y
              amazon-linux-extras install -y docker
              service docker start
              usermod -a -G docker ec2-user
              yum install -y wget
              yum install -y jq
              echo ${AWS::StackName}
      Tags:
        - Key: Name
          Value: !Ref InstanceName

  FileCreator:
    Type: AWS::EC2::Instance
    DependsOn: [EC2Instance1,EC2Instance2,EC2Instance3]
    Properties:
      SubnetId: !Ref EC2Subnet1
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !ImportValue
          'Fn::Sub': ${SecurityStackName}-RKESecurityGroupID
      IamInstanceProfile: !Ref InstanceIamProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref EBSVolumeSize
            VolumeType: gp2
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: t2.micro
      UserData:
        Fn::Base64: !Sub |
              #!/bin/bash
              yum update -y
              amazon-linux-extras install -y docker
              service docker start
              usermod -a -G docker ec2-user
              yum install -y wget
              yum install -y jq

              ### Create RKE cluster.yml file
              cat > /tmp/cluster.yml <<EOF
              nodes:
                - address: ${EC2Instance1.PrivateIp}
                  internal_address: ${EC2Instance1.PrivateIp}
                  user: ec2-user
                  ssh_key_path: ~/.ssh/id_rsa/${KeyName}
                  role: [controlplane,worker,etcd]

                - address: ${EC2Instance2.PrivateIp}
                  internal_address: ${EC2Instance2.PrivateIp}
                  user: ec2-user
                  ssh_key_path: ~/.ssh/id_rsa/${KeyName}
                  role: [controlplane,worker,etcd]

                - address: ${EC2Instance3.PrivateIp}
                  internal_address: ${EC2Instance3.PrivateIp}
                  user: ec2-user
                  ssh_key_path: ~/.ssh/id_rsa/${KeyName}
                  role: [controlplane,worker,etcd]

              services:
                etcd:
                  snapshot: true
                  creation: 6h
                  retention: 24h
              EOF

              ### Store file in parameter store
              aws ssm put-parameter --name ${ApplicationName} --type "String" --value "$(cat /tmp/cluster.yml)" --region ${AWS::Region}
              rm -f /tmp/cluster.yml

              ### Create SSH-HostKey hostkey.yml file
              cat > /tmp/hostkey.sh <<EOF
              ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa/${KeyName} ec2-user@${EC2Instance1.PrivateIp} uptime
              ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa/${KeyName} ec2-user@${EC2Instance2.PrivateIp} uptime
              ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa/${KeyName} ec2-user@${EC2Instance3.PrivateIp} uptime
              EOF

              ### Store file in parameter store
              aws ssm put-parameter --name SSH-HostKey-${ApplicationName} --type "String" --value "$(cat /tmp/hostkey.sh)" --region ${AWS::Region}
              rm -f /tmp/hostkey.sh

      Tags:
        - Key: Name
          Value: FileCreator

# NLB
  EaaSNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref LoadBalancerName
      Scheme: !Ref LoadBalancerScheme
      Subnets:
        - !Ref EC2Subnet1
        - !Ref EC2Subnet2
      Type: network
      Tags:
        - Key: Name
          Value: !Ref LoadBalancerName

# LOAD BALANCER LISTENER
  EaaSNetworkLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref EaaSTargetGroup
      LoadBalancerArn: !Ref EaaSNetworkLoadBalancer
      Port: !Ref Port
      Protocol: !Ref LoadBalancerProtocol

# TARGET GROUP
  EaaSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Name: !Ref TargetGroupName
      HealthCheckProtocol: !Ref HealthCheckProtocol
      HealthyThresholdCount: !Ref HealthyThresholdCount
      HealthCheckIntervalSeconds: !Ref HealthCheckIntervalSeconds
      UnhealthyThresholdCount: !Ref UnhealthyThresholdCount
      Targets:
        - Id: !Ref EC2Instance1
        - Id: !Ref EC2Instance2
        - Id: !Ref EC2Instance3
      Port: !Ref Port
      Protocol: !Ref HealthCheckProtocol
      VpcId: !Ref VpcId

# PRIVATE HOSTED ZONE
  DNSHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      HostedZoneConfig:
        Comment: !Sub "${PHZName} private DNS zone"
      Name: !Ref PHZName
      VPCs:
        -
          VPCId: !Ref VpcId
          VPCRegion: !Ref "AWS::Region"

# ROUTE 53 RECORD SET
  myDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref PHZName
      Comment: Targeted to Rancher LoadBalancer.
      Name: !Ref ApplicationName
      Type: CNAME
      TTL: 300
      # ResourceRecords: !GetAtt EaaSNetworkLoadBalancer.DNSName
      ResourceRecords:
        - 'Fn::GetAtt':
            - EaaSNetworkLoadBalancer
            - DNSName

###############################################################################
#                               Exports/Outputs                               #
###############################################################################
Outputs:
  DomainName:
    Value: !Ref ApplicationName
    Export:
      Name: RKEStackNodes-ApplicationNameID
