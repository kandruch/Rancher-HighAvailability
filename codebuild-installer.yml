AWSTemplateFormatVersion: "2010-09-09"
Description: 'CodeBuild - RKE Installer'
###############################################################################
#                               Parameters                                    #
###############################################################################
Parameters:
  SecurityStackName:
    Description: >-
      Active CloudFormation stack that contains the security
      resources, such as the security group, that will be used in
      this stack.
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: RKESecurityStack
  # SecurityGroup:
  #   Description: Please select which security group this EC2 will use.
  #   Type: AWS::EC2::SecurityGroup::Id
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: String
  SecretsManager:
    Description: Name of Secret
    Type: String
    Default: RSA
  ApplicationName:
    Type: String
    Default: rancher.example.com
    Description: The name of your application
  VpcId:
    Description: VPC ID where the instances will be deployed
    Type: 'AWS::EC2::VPC::Id'
  EC2Subnet1:
    Description: Please select which subnet this EC2 will be deployed in.
    Type: AWS::EC2::Subnet::Id
  EC2Subnet2:
    Description: Please select which subnet this EC2 will be deployed in.
    Type: AWS::EC2::Subnet::Id
##############################################################################
#                               Resources                                    #
##############################################################################
Resources:
  # CODEBUILD PROJECT
  RancherCodeBuildProject:
    DependsOn: CodeBuildPolicy
    Type: AWS::CodeBuild::Project
    Properties:
      Name: CodeBuild-RKE-Installation
      Description: Rancher CodeBuild Project For High Availability
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_LARGE
        Image: aws/codebuild/standard:2.0
      VpcConfig:
        VpcId: !Ref VpcId
        Subnets:
          - !Ref EC2Subnet1
          - !Ref EC2Subnet2
        SecurityGroupIds:
          - !ImportValue
            'Fn::Sub': ${SecurityStackName}-RKESecurityGroupID
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              commands:
                - echo Entered the install phase...
                - apt-get install jq -y
                - mkdir -p ~/.ssh/id_rsa
                - chmod 500 ~/.ssh
                - chmod 500 ~/.ssh/id_rsa
                - mkdir -p $HOME/bin
                - aws secretsmanager get-secret-value --secret-id SecretKey${SecretsManager} --region ${AWS::Region} | jq -r .SecretString > ~/.ssh/id_rsa/${KeyName}
                - chmod 400 ~/.ssh/id_rsa/${KeyName}
                - aws ssm get-parameters --name SSH-HostKey-${ApplicationName} --region ${AWS::Region} | jq -r '.Parameters[0].Value' > $HOME/bin/hostkey.sh
                - sh -x $HOME/bin/hostkey.sh
                #- aws ssm get-parameters --name ${ApplicationName} --region ${AWS::Region} | jq -r '.Parameters[0].Value' > $HOME/cluster.yml
                - aws ssm get-parameters --name ${ApplicationName} --region ${AWS::Region} | jq -r '.Parameters[0].Value' > cluster.yml
                - wget https://github.com/rancher/rke/releases/download/v0.3.2/rke_linux-amd64 -O $HOME/bin/rke
                - wget https://amazon-eks.s3-us-west-2.amazonaws.com/1.14.6/2019-08-22/bin/linux/amd64/kubectl -O $HOME/bin/kubectl 
                - chmod +x $HOME/bin/rke
                - chmod +x $HOME/bin/kubectl
                - echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
                - mkdir $HOME/.kube

            pre_build:
              commands:
                - echo Entered the pre_build phase...
                - $HOME/bin/rke up

            build:
              commands:
                - echo Entered the build phase...
                - mv kube_config_cluster.yml $HOME/.kube/config
                - kubectl get svc
                - wget https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get -O $HOME/bin/get_helm.sh
                - chmod +x $HOME/bin/get_helm.sh
                - echo export PATH=$PATH:/usr/local/bin >> ~/.bashrc
                - $HOME/bin/get_helm.sh
                - kubectl create serviceaccount tiller --namespace kube-system
                - kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller
                - helm init --wait --service-account tiller
                - helm repo update
                - kubectl get pods -l app=helm -n kube-system
                - helm repo add rancher-latest https://releases.rancher.com/server-charts/latest
                - helm fetch rancher-latest/rancher
            post_build:
              commands:
                - echo Entered the post-build phase...
                - kubectl -n kube-system get po
                - kubectl get namespaces
                - helm install stable/cert-manager --name cert-manager --namespace kube-system --version v0.5.2
                - helm install rancher-latest/rancher --name rancher --namespace cattle-system --set hostname=`echo ${ApplicationName} | sed -e 's/\.$//'`
                - INSTANCE=$(aws ec2 describe-instances --region ${AWS::Region} --filter 'Name=tag:Name,Values=FileCreator' | jq -r '.Reservations[] | .Instances[] | .InstanceId')
                - aws ec2 terminate-instances --instance-ids $INSTANCE --region ${AWS::Region}

      TimeoutInMinutes: 15
      Tags:
      - Key: RANCHER
        Value: RKEInstallater-CodeBuild

# CODEBUILD ROLE
  CodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: CodeBuild-RKE-Installation
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /service-role/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite

  CodeBuildPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: CodeBuild-RKE-Installation
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Action:
              - secretsmanager:CreateSecret
              - secretsmanager:GetSecretValue
              - secretsmanager:ListSecrets
              - secretsmanager:TagResource
              - secretsmanager:UpdateSecret
              - ec2:*
              - ssm:*
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - logs:CreateLogStream
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetBucketAcl"
              - s3:GetBucketLocation
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              - !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:*/*
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/${KeyName}
              - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:build:*/*
              - !Sub arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*
              - '*'
      Roles:
        -
          !Ref CodeBuildRole

# # Custom Resource
  CustomeCodeBuildResource:
    DependsOn: CodeBuildPolicy
    Type: AWS::CloudFormation::CustomResource
    # DependsOn: RanchMaster
    Properties:
      ServiceToken: !GetAtt LambdaCodeBuildTrigger.Arn
      ProjectName: CodeBuild-RKE-Installation

# # Lambda function that starts a codebuild project!
  LambdaCodeBuildTrigger:
    DependsOn: RancherCodeBuildProject
    Type: AWS::Lambda::Function
    Properties:
      Description: A Lambda function that triggers a CodeBuild Project
      Timeout: 300
      Handler: index.codebuild_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import logging
          import json

          LOGGER = logging.getLogger()
          LOGGER.setLevel(logging.INFO)

          # Boto3 AWS Services
          codebuild_client = boto3.client('codebuild')

          def codebuild_handler(event, context):
            print("event ", event)

            if event["RequestType"] == "Create":
              # Creating resource
              LOGGER.info('CREATE!')
              # Create KeyPair
              creating = (event['ResourceProperties'])
              start_build = codebuild_client.start_build(
                  projectName=event['ResourceProperties']['ProjectName'])
              cfnresponse.send(event, context, cfnresponse.SUCCESS, creating)

            elif event["RequestType"] == "Update":
              # Updating resource
              updating = (event['ResourceProperties'])
              LOGGER.info('UPDATE!')
              cfnresponse.send(event, context, cfnresponse.SUCCESS, updating)

            elif event["RequestType"] == "Delete":
              # Get object name and version id details
              deleting = (event['ResourceProperties'])
              LOGGER.info('DELETE!')
              cfnresponse.send(event, context, cfnresponse.SUCCESS, deleting)

            response = cfnresponse.FAILED
            return response

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TheKeyPair_Lambda
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource:
                  - '*'
###############################################################################
#                               Exports/Outputs                               #
###############################################################################
Outputs:
  KeyName:
    Value: !Ref KeyName
  SecretsManager:
    Value: !Ref SecretsManager
  CodeBuildRole:
    Value: !Ref CodeBuildRole
  RancherCodeBuildProject:
    Value: !Ref RancherCodeBuildProject
  LambdaCodeBuildTrigger:
    Value: !Ref LambdaCodeBuildTrigger
